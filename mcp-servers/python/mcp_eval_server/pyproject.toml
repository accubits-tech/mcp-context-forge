[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-eval-server"
version = "0.1.0"
description = "MCP server for comprehensive agent and prompt evaluation using LLM-as-a-judge techniques"
readme = "README.md"
license = { text = "Apache-2.0" }
authors = [
    { name = "Mihai Criveti", email = "redacted@ibm.com" }
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = [
    "mcp>=1.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "openai>=1.0.0",
    "httpx>=0.24.0",
    "aiofiles>=23.0.0",
    "PyYAML>=6.0.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "scikit-learn>=1.0.0",
    "textstat>=0.7.0",
    "tenacity>=8.0.0",
    "cachetools>=5.0.0",
    "diskcache>=5.6.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "isort>=5.12.0",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
]
benchmark = [
    "locust>=2.15.0",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
]
anthropic = [
    "anthropic>=0.18.0",
]
aws = [
    "boto3>=1.26.0",
    "botocore>=1.29.0",
]
ollama = [
    "aiohttp>=3.8.0",
]
gemini = [
    "google-generativeai>=0.3.0",
]
watsonx = [
    "ibm-watsonx-ai>=1.0.0",
]
all = [
    "anthropic>=0.18.0",
    "boto3>=1.26.0",
    "botocore>=1.29.0",
    "aiohttp>=3.8.0",
    "google-generativeai>=0.3.0",
    "ibm-watsonx-ai>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/contextforge/mcp-context-forge"
Documentation = "https://contextforge.github.io/mcp-eval-server"
Repository = "https://github.com/contextforge/mcp-context-forge"
Issues = "https://github.com/contextforge/mcp-context-forge/issues"

[project.scripts]
mcp-eval-server = "mcp_eval_server.server:main"

[tool.hatch.build.targets.wheel]
packages = ["mcp_eval_server"]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "textstat.*",
    "cachetools.*",
    "diskcache.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=mcp_eval_server --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["mcp_eval_server"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
